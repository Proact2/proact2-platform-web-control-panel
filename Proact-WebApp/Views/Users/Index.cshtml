@model IEnumerable<Proact_WebApp.UserModel>

@{
    ViewData["Title"] = "Users";
}

<p>
    <div class="row">
        <div class="col-2">
            <a class="btn btn-block btn-success" asp-action="Create">Create New</a>
        </div>
    </div>
</p>
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">All Users</h3>
            </div>
            <!-- /.card-header -->
            <div class="card-body">
                <table id="UsersTable" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.Name)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.UserId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.AccountId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.State)
                            </th>
                            <th>
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.UserId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.AccountId)
                            </td>
                            <td>
                                @if (item.State == UserSubscriptionState.Active)
                                {
                                    <span class="badge bg-success">  @Html.DisplayFor(modelItem => item.State)</span>
                                }
                                else if (item.State == UserSubscriptionState.Deactivated)
                                {
                                    <span class="badge bg-danger">  @Html.DisplayFor(modelItem => item.State)</span>
                                }
                                else if (item.State == UserSubscriptionState.Suspended)
                                {
                                    <span class="badge bg-warning">  @Html.DisplayFor(modelItem => item.State)</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-info">Action</button>
                                    <button type="button" class="btn btn-info dropdown-toggle dropdown-icon" data-toggle="dropdown">
                                        <span class="sr-only">Toggle Dropdown</span>
                                    </button>
                                    <div class="dropdown-menu" role="menu">
                                        <a class="dropdown-item" href="#">Edit</a>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item" href="#">Delete</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.Name)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.UserId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.AccountId)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.State)
                            </th>
                            <th>
                                Actions
                            </th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <!-- /.card-body -->
        </div>
    </div>
</div>

@section Scripts {

    <!-- DataTables  & Plugins -->
    <script src="~/lib/datatables/jquery.dataTables.min.js"></script>
    <script src="~/lib/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/lib/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/lib/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/lib/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/lib/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/lib/jszip/jszip.min.js"></script>
    <script src="~/lib/pdfmake/pdfmake.min.js"></script>
    <script src="~/lib/pdfmake/vfs_fonts.js"></script>
    <script src="~/lib/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/lib/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/lib/datatables-buttons/js/buttons.colVis.min.js"></script>

    <script>
        $(function () {
            $("#UsersTable").DataTable({
                "responsive": true, "lengthChange": false, "autoWidth": false,
                "buttons": ["excel", "pdf", "print", "colvis"]
            }).buttons().container().appendTo('#UsersTable_wrapper .col-md-6:eq(0)');
        });
    </script>
}
